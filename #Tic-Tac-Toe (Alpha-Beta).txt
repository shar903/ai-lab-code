#Tic-Tac-Toe (Alpha-Beta)
import math

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("---------")

def evaluate(board):
    # Check rows, columns, and diagonals for a win
    for row in board:
        if row.count(row[0]) == 3 and row[0] != ' ':
            return 10 if row[0] == 'X' else -10

    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] and board[0][col] != ' ':
            return 10 if board[0][col] == 'X' else -10

    if board[0][0] == board[1][1] == board[2][2] and board[0][0] != ' ':
        return 10 if board[0][0] == 'X' else -10

    if board[0][2] == board[1][1] == board[2][0] and board[0][2] != ' ':
        return 10 if board[0][2] == 'X' else -10

    # No winner, game is a draw
    return 0

def is_moves_left(board):
    for row in board:
        if ' ' in row:
            return True
    return False

def minimax(board, depth, is_maximizing, alpha, beta):
    score = evaluate(board)

    if score == 10 or score == -10:
        return score

    if not is_moves_left(board):
        return 0

    if is_maximizing:
        max_eval = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'
                    eval = minimax(board, depth + 1, not is_maximizing, alpha, beta)
                    board[i][j] = ' '

                    max_eval = max(max_eval, eval)
                    alpha = max(alpha, eval)

                    if beta <= alpha:
                        break
        return max_eval

    else:
        min_eval = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'
                    eval = minimax(board, depth + 1, not is_maximizing, alpha, beta)
                    board[i][j] = ' '

                    min_eval = min(min_eval, eval)
                    beta = min(beta, eval)

                    if beta <= alpha:
                        break
        return min_eval

def find_best_move(board):
    best_val = -math.inf
    best_move = (-1, -1)

    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'X'
                move_val = minimax(board, 0, False, -math.inf, math.inf)
                board[i][j] = ' '

                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val

    return best_move

def play_game():
    board = [[' ' for _ in range(3)] for _ in range(3)]

    print("Tic Tac Toe - Alpha-Beta Pruning")

    while is_moves_left(board):
        print_board(board)
        row, col = find_best_move(board)
        print(f"\nAI (X) makes a move: ({row}, {col})")
        board[row][col] = 'X'

        if evaluate(board) == 10:
            print_board(board)
            print("AI wins!")
            break

        print_board(board)
        player_row = int(input("Enter your move (row 0-2): "))
        player_col = int(input("Enter your move (column 0-2): "))

        if board[player_row][player_col] != ' ':
            print("Invalid move. Try again.")
            continue

        board[player_row][player_col] = 'O'

        if evaluate(board) == -10:
            print_board(board)
            print("You win!")
            break

    if not is_moves_left(board) and evaluate(board) == 0:
        print_board(board)
        print("It's a draw!")

play_game()
